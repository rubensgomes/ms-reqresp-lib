plugins {
  id("idea")
  id("maven-publish")
  id("version-catalog")
  id("java-library")
  alias(ctlg.plugins.jsonschema2pojo)
  alias(ctlg.plugins.release)
  alias(ctlg.plugins.spotless)
}

val developerId: String by project
val developerName: String by project

val group: String by project
val artifact: String by project
val version: String by project
val title: String by project
val description: String by project

project.group = group

project.version = version

project.description = description

idea {
  module {
    // download javadocs and sources:
    // $ ./gradlew cleanIdea idea
    isDownloadJavadoc = true
    isDownloadSources = true
  }
}

java {
  withSourcesJar()
  withJavadocJar()
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(21))
    vendor.set(JvmVendorSpec.AMAZON)
  }
}

configure<com.diffplug.gradle.spotless.SpotlessExtension> {
  json {
    target("src/**/*.json")
    jackson()
  }

  kotlinGradle {
    target("*.gradle.kts")
    ktfmt()
  }
}

publishing {
  publications {
    val developerEmail: String by project

    val scmConnection: String by project
    val scmUrl: String by project

    val license: String by project
    val licenseUrl: String by project

    create<MavenPublication>("maven") {
      groupId = project.group.toString()
      artifactId = artifact
      version = project.version.toString()

      from(components["java"])

      pom {
        name = title
        description = project.description
        inceptionYear = "2024"
        packaging = "jar"

        licenses {
          license {
            name = license
            url = licenseUrl
          }
        }
        developers {
          developer {
            id = developerId
            name = developerName
            email = developerEmail
          }
        }
        scm {
          connection = scmConnection
          developerConnection = scmConnection
          url = scmUrl
        }
      }
    }
  }

  repositories {
    val repsyUrl: String by project
    val repsyUsername: String by project
    val repsyPassword: String by project

    maven {
      url = uri(repsyUrl)
      credentials {
        username = repsyUsername
        password = repsyPassword
      }
    }
  }
}

// "net.researchgate.release" configuration
release {
  with(git) {
    pushReleaseVersionBranch.set("release")
    requireBranch.set("main")
  }
}

// net.researchgate.release plugin task
tasks.afterReleaseBuild { dependsOn("publish") }

tasks.jar {
  manifest {
    attributes(
        mapOf(
            "Specification-Title" to title,
            "Implementation-Title" to artifact,
            "Implementation-Version" to project.version,
            "Implementation-Vendor" to developerName,
            "Built-By" to developerId,
            "Build-Jdk" to System.getProperty("java.home"),
            "Created-By" to
                "${System.getProperty("java.version")} (${
                            System.getProperty(
                                "java.vendor"
                            )
                        })"))
  }
}

dependencies {
  implementation(ctlg.jackson.databind)
  implementation(ctlg.jakarta.validation.api)
}

// Add Java sources generated by the jsonSchema2Pojo
sourceSets {
  main {
    java {
      // sources generated by the jsonSchema2Pojo plugind
      srcDir("${layout.buildDirectory}/generatedsources/js2p/")
    }
  }
}

tasks.named<Jar>("sourcesJar") { dependsOn("generateJsonSchema2Pojo") }

tasks.javadoc {
  if (JavaVersion.current().isJava9Compatible) {
    (options as StandardJavadocDocletOptions).addBooleanOption("html5", true)
  }
}

// ####################### jsonSchema2Pojo plugin ##############################

jsonSchema2Pojo {
  // Whether to generate builder-style methods of the form withXxx(value)
  // (that return this), alongside the standard, void-return setters.
  generateBuilders = true

  // If set to true, then the gang of four builder pattern will be used to
  // generate builders on generated classes. Note: This property works in
  // collaboration with generateBuilders.  If generateBuilders is false then
  // this property will not do anything.
  useInnerClassBuilders = true

  // Whether to generate constructors or not.
  includeConstructors = true

  // Whether to include JSR-303/349 annotations (for schema rules like
  // minimum, maximum, etc) in generated Java types. Schema rules and the
  // annotation they produce:
  //  - maximum = @DecimalMax
  //  - minimum = @DecimalMin
  //  - minItems,maxItems = @Size
  //  - minLength,maxLength = @Size
  //  - pattern = @Pattern
  //  - required = @NotNull
  // Any Java fields which are an object or array of objects will be
  // annotated with @Valid to support validation of an entire document tree.
  includeJsr303Annotations = true

  // What Java version to target with generated source code
  // (1.6, 1.8, 9, 11, etc).
  // By default, the version will be taken from the Gradle Java plugin's
  // 'sourceCompatibility', which (if unset) itself defaults to the current
  // JVM version
  targetVersion = "21"

  // Whether to use annotations from jakarta.validation package instead of
  // javax.validation package when adding JSR-303 annotations to generated
  // Java types
  useJakartaValidation = true
}
